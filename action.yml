name: 'Diary Converter'
description: 'Convert development diary logs to Zenn articles with optimized formatting for project documentation'
author: 'centervil'

# Example usage:
# - name: Convert Development Diary
#   uses: centervil/Diary-Converter@main
#   with:
#     source_file: 'dev-records/2025-03-26-development.md'
#     destination_file: 'articles/2025-03-26-dev-diary.md'
#     api_key: ${{ secrets.GOOGLE_API_KEY }}
#     model: 'gemini-2.0-flash-001'
#     project_name: 'Diary-Converter'
#     issue_number: '1'
#     prev_article: 'dev-diary'

inputs:
  source_file:
    description: 'Path to the source diary file'
    required: true
  destination_file:
    description: 'Path to the destination article file'
    required: true
  api_key:
    description: 'Gemini API Key'
    required: true
  model:
    description: 'Gemini model to use'
    required: false
    default: 'gemini-2.0-flash-001'
  template:
    description: 'Template file path'
    required: false
    default: './templates/zenn_template.md'
  debug:
    description: 'Enable debug mode'
    required: false
    default: 'false'
  project_name:
    description: 'Project name for article title format "[Project Name] 開発日記 #[Issue Number]: [Theme]"'
    required: false
    default: 'プロジェクト'
  issue_number:
    description: 'Sequential number for article title (e.g. issue number or article sequence)'
    required: false
    default: '1'
  prev_article:
    description: 'Previous article slug for related links section (without date prefix, e.g. "dev-diary" not "2025-03-25-dev-diary")'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ${{ github.action_path }}/requirements.txt
      shell: bash

    - name: Prepare output directory
      run: |
        mkdir -p $(dirname ${{ github.workspace }}/${{ inputs.destination_file }})
      shell: bash

    - name: Run Diary Converter
      run: |
        cd ${{ github.action_path }}
        
        # Debug mode flag
        DEBUG_FLAG=""
        if [ "${{ inputs.debug }}" = "true" ]; then
          DEBUG_FLAG="--debug"
          echo "Debug mode enabled"
        fi
        
        # Template path handling
        TEMPLATE_ARG=""
        if [ -n "${{ inputs.template }}" ]; then
          if [[ "${{ inputs.template }}" == /* ]]; then
            # Absolute path
            TEMPLATE_ARG="--template ${{ inputs.template }}"
          else
            # Relative path
            TEMPLATE_ARG="--template ${{ github.workspace }}/${{ inputs.template }}"
          fi
          echo "Using template: $TEMPLATE_ARG"
        fi
        
        
        # Detect project name from source file path
        SOURCE_PATH="${{ inputs.source_file }}"
        PROJECT_NAME="プロジェクト"  # Default value
        
        # Extract project name from the path structure
        # Example: If source_file is "ProjectA/dev-records/2025-03-30-development.md", 
        # then PROJECT_NAME will be "ProjectA"
        if [[ "$SOURCE_PATH" == *"/"* ]]; then
          PROJECT_DIR=$(dirname "$SOURCE_PATH" | cut -d'/' -f1)
          if [ -n "$PROJECT_DIR" ]; then
            PROJECT_NAME="$PROJECT_DIR"
          fi
        fi
        
        # Override with input parameter if provided
        if [ -n "${{ inputs.project_name }}" ]; then
          PROJECT_NAME="${{ inputs.project_name }}"
        fi
        
        PROJECT_NAME_ARG="--project-name $PROJECT_NAME"
        echo "Using project name: $PROJECT_NAME"
        
        # Determine issue number based on existing articles
        ISSUE_NUMBER="1"  # Default value
        
        # Count existing articles to determine the issue number
        if [ -d "$(dirname "${{ github.workspace }}/${{ inputs.destination_file }}")" ]; then
          ARTICLE_COUNT=$(find "$(dirname "${{ github.workspace }}/${{ inputs.destination_file }}")" -type f -name "*.md" | wc -l)
          ISSUE_NUMBER=$((ARTICLE_COUNT + 1))
        fi
        
        # Override with input parameter if provided
        if [ -n "${{ inputs.issue_number }}" ]; then
          ISSUE_NUMBER="${{ inputs.issue_number }}"
        fi
        
        ISSUE_NUMBER_ARG="--issue-number $ISSUE_NUMBER"
        echo "Using issue number: $ISSUE_NUMBER"
        
        # Previous article slug for related links section
        # Example: If previous article is "2025-03-25-dev-diary.md", use "dev-diary"
        PREV_ARTICLE_ARG=""
        if [ -n "${{ inputs.prev_article }}" ]; then
          PREV_ARTICLE_ARG="--prev-article ${{ inputs.prev_article }}"
          echo "Using previous article: $PREV_ARTICLE_ARG"
        fi
        
        # Set API key
        export GOOGLE_API_KEY="${{ inputs.api_key }}"
        
        echo "Converting ${{ inputs.source_file }} to ${{ inputs.destination_file }}"
        echo "Using model: ${{ inputs.model }}"
        
        # Run the converter with all parameters
        PYTHONPATH=${{ github.action_path }}/src python -m diary_converter.diary_converter \
          "${{ github.workspace }}/${{ inputs.source_file }}" \
          "${{ github.workspace }}/${{ inputs.destination_file }}" \
          --model "${{ inputs.model }}" \
          $DEBUG_FLAG $TEMPLATE_ARG $PROJECT_NAME_ARG $ISSUE_NUMBER_ARG $PREV_ARTICLE_ARG
      shell: bash

    - name: Process Generated Document
      run: |
        cd ${{ github.action_path }}
        
        # Debug mode flag
        DEBUG_FLAG=""
        if [ "${{ inputs.debug }}" = "true" ]; then
          DEBUG_FLAG="--debug"
          echo "Debug mode enabled for document processing"
        fi
        
        echo "Processing generated document to fix common LLM output issues..."
        PYTHONPATH=${{ github.action_path }}/src python -m diary_converter.document_processor \
          "${{ github.workspace }}/${{ inputs.destination_file }}" \
          $DEBUG_FLAG
        
        echo "Document processing completed"
      shell: bash

    - name: Verify Output
      run: |
        if [ -f "${{ github.workspace }}/${{ inputs.destination_file }}" ]; then
          echo "✅ Conversion and processing successful: ${{ inputs.destination_file }}"
          wc -l "${{ github.workspace }}/${{ inputs.destination_file }}"
        else
          echo "❌ Conversion failed: File not created"
          exit 1
        fi
      shell: bash

branding:
  icon: 'book'
  color: 'blue'
